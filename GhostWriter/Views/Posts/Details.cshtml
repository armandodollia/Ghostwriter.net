@model Ghostwriter.Entities.Models.PostDetailViewModel


<div class="page-header">
    <h1>@Model.Title</h1>
    <p><small>@Model.Body</small></p>
    @if (ViewBag.ShowEditButton)
    {
        <a href="@Url.Action("Edit", "Posts", new { id = Model.Id })" class="btn btn-default navbar-btn">
            Edit
        </a>
        <a id="publishButton" class="btn btn-default navbar-btn">@(Model.IsPublished ? "Unpublish" : "Publish")</a>  
    }

    @using (Html.BeginForm(Model.HasVoted ? "Delete/" + Model.Votes.Where(v => v.PostId == Model.Id).Select(v => v.Id).FirstOrDefault() : "Create", "PostVotes", FormMethod.Post))
    {
        @Html.AntiForgeryToken();

        @Html.Hidden("PostId", Model.Id)

        <button type="submit" id="likeButton" class="btn btn-default navbar-btn">
            <span class="glyphicon glyphicon-heart" aria-hidden="true"></span>
            @(Model.HasVoted ? "Un-Like!" : "Like!")
        </button>
    }


    <p>@Model.Votes.Count() Likes</p>
</div>

@using (Html.BeginForm("Create", "Comments", FormMethod.Post))
{
    @Html.AntiForgeryToken();
    @Html.Hidden("PostId", Model.Id)
    @Html.TextArea("Body", "")
    <input type="submit" name="AddComment" value="Add Comment" />
}


@Html.ActionLink("New Comment", "Create", "Comments", routeValues: null, htmlAttributes: new { @class = "btn btn-default" })


<ul class="list-group" id="comments_list">
    @foreach (var comment in Model.Comments)
    {
        @Html.Partial("_Comment", comment)
    }
</ul>

@section Scripts {
    @Scripts.Render("~/Scripts/postPublishing.js")
}

<script type="text/javascript">
    var _url = '@Url.Action("publish", "posts")';
</script>